#!/usr/bin/env node

/**
 * Module dependencies.
 */

var server = require('../lib/server')
  , client = require('../lib/client')
  , program = require('commander')
  , pkg = require('../package')
  , bytes = require('bytes')
  , s = require('printf')
  , ms = require('ms');

// options

program
  .version(pkg.version)
  .option('-a, --addr <addr>', 'bind address [0.0.0.0]', '0.0.0.0')
  .option('-l, --cycles', 'list cycle names')
  .option('-c, --cycle <cycle>', 'get cycle stats')
  .option('-g, --get <cycle>', 'output cycle json')
  .option('-p, --probes <cycle>', 'inspect cycle probes')
  .option('-j, --json', 'output json')
  .option('-m, --max-rss <str>', 'max resident memory usage [100mb]', '100mb')
  .option('--clear-all', 'clear all traces')
  .parse(process.argv);

// title

process.title = 'trace';

// memory check

var max = bytes(program.maxRss);

setInterval(function(){
  var used = process.memoryUsage().rss;
  if (used > max) {
    console.log('max memory of %s exceeded (%s), exiting', bytes(max), bytes(used));
    process.exit(2);
  }
}, 60000);

/**
 * JSON helper.
 */

function json(obj) {
  console.log(JSON.stringify(obj, null, 2));
  process.exit(0);
}

// --probes <cycle>

if (program.probes) {
  return client.get(program.probes, function(err, data){
    for (var id in data) {
      console.log();
      var probes = data[id].probes;
      for (var name in probes) {
        var probe = probes[name];
        var delta = probe.end - probe.start;
        if (isNaN(delta)) continue;
        console.log(s('  \033[36m%15s\033[m: %s', name, ms(delta)));
      }
    }
    console.log();
    process.exit();
  });
}

// --get <cycle>

if (program.get) {
  return client.get(program.get, function(err, data){
    if (err) throw err;
    json(data);
  });
}

// --cycles

if (program.cycles) {
  return client.cycles(function(err, names){
    if (err) throw err;
    if (program.json) return json(names);
    names.forEach(function(name){
      console.log(name);
    });
    process.exit(0);
  });
}

// --cycle <cycle>

if (program.cycle) {
  return client.stats(program.cycle, function(err, stats){
    if (program.json) return json(stats.probes);
    for (var name in stats.probes) {
      console.log();
      console.log(s('  \033[36m%13s\033[0m', name));
      for (var metric in stats.probes[name]) {
        var val = stats.probes[name][metric];
        console.log(s('    \033[90m%10s:\033[0m %s', metric, 'count' == metric ? val : ms(val)));
      }
    }
    console.log();
    process.exit(0);
  });
}

// --clear-all

if (program.clearAll) {
  return client.clearAll(function(err){
    if (err) throw err;
    process.exit(0);
  });
}

// bind

var addr = 'tcp://' + program.addr + ':5555';
server.sub.bind(addr);
console.log('sub bound to %s', addr);

var addr = 'tcp://' + program.addr + ':5556';
server.rep.bind(addr);
console.log('rep bound to %s', addr);
